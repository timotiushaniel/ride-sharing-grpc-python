# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import ride_sharing_pb2 as proto_dot_ride__sharing__pb2


class RideShareStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserLocation = channel.unary_unary(
                '/RideShare/GetUserLocation',
                request_serializer=proto_dot_ride__sharing__pb2.Point.SerializeToString,
                response_deserializer=proto_dot_ride__sharing__pb2.User.FromString,
                )
        self.ListDriver = channel.unary_stream(
                '/RideShare/ListDriver',
                request_serializer=proto_dot_ride__sharing__pb2.Rectangle.SerializeToString,
                response_deserializer=proto_dot_ride__sharing__pb2.Driver.FromString,
                )
        self.ChooseDriver = channel.stream_stream(
                '/RideShare/ChooseDriver',
                request_serializer=proto_dot_ride__sharing__pb2.DriverChosen.SerializeToString,
                response_deserializer=proto_dot_ride__sharing__pb2.DriverChosen.FromString,
                )
        self.GiveRating = channel.stream_stream(
                '/RideShare/GiveRating',
                request_serializer=proto_dot_ride__sharing__pb2.DriverChosen.SerializeToString,
                response_deserializer=proto_dot_ride__sharing__pb2.DriverChosen.FromString,
                )


class RideShareServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUserLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDriver(self, request, context):
        """A server-to-client streaming RPC.

        Obtains the Features available within the given Rectangle.  Results are
        streamed rather than returned at once (e.g. in a response message with a
        repeated field), as the rectangle may cover a large area and contain a
        huge number of features.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChooseDriver(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GiveRating(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RideShareServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserLocation,
                    request_deserializer=proto_dot_ride__sharing__pb2.Point.FromString,
                    response_serializer=proto_dot_ride__sharing__pb2.User.SerializeToString,
            ),
            'ListDriver': grpc.unary_stream_rpc_method_handler(
                    servicer.ListDriver,
                    request_deserializer=proto_dot_ride__sharing__pb2.Rectangle.FromString,
                    response_serializer=proto_dot_ride__sharing__pb2.Driver.SerializeToString,
            ),
            'ChooseDriver': grpc.stream_stream_rpc_method_handler(
                    servicer.ChooseDriver,
                    request_deserializer=proto_dot_ride__sharing__pb2.DriverChosen.FromString,
                    response_serializer=proto_dot_ride__sharing__pb2.DriverChosen.SerializeToString,
            ),
            'GiveRating': grpc.stream_stream_rpc_method_handler(
                    servicer.GiveRating,
                    request_deserializer=proto_dot_ride__sharing__pb2.DriverChosen.FromString,
                    response_serializer=proto_dot_ride__sharing__pb2.DriverChosen.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RideShare', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RideShare(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUserLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RideShare/GetUserLocation',
            proto_dot_ride__sharing__pb2.Point.SerializeToString,
            proto_dot_ride__sharing__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RideShare/ListDriver',
            proto_dot_ride__sharing__pb2.Rectangle.SerializeToString,
            proto_dot_ride__sharing__pb2.Driver.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChooseDriver(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/RideShare/ChooseDriver',
            proto_dot_ride__sharing__pb2.DriverChosen.SerializeToString,
            proto_dot_ride__sharing__pb2.DriverChosen.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GiveRating(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/RideShare/GiveRating',
            proto_dot_ride__sharing__pb2.DriverChosen.SerializeToString,
            proto_dot_ride__sharing__pb2.DriverChosen.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
